// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: protos/emailsettings_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailSettingsxClient is the client API for EmailSettingsx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailSettingsxClient interface {
	GetSettingsByIds(ctx context.Context, in *EmailSettingsIdsRequest, opts ...grpc.CallOption) (*EmailSettingsListReply, error)
	GetSettingsById(ctx context.Context, in *EmailSettingsIdRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error)
	GetSettingsByEmail(ctx context.Context, in *EmailSettingsEmailRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error)
	SetSettings(ctx context.Context, in *EmailSettingsObjectRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error)
	SetVerifiedSettings(ctx context.Context, in *EmailSettingsObjectRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error)
	SetRecipient(ctx context.Context, in *EmailSettingsRecipientRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error)
	SetSubscriptions(ctx context.Context, in *EmailSettingsSubscriptionsRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error)
	DeleteSettingsById(ctx context.Context, in *EmailSettingsIdRequest, opts ...grpc.CallOption) (*EmailSettingsEmptyReply, error)
	ResendVerification(ctx context.Context, in *EmailSettingsIdRequest, opts ...grpc.CallOption) (*EmailSettingsEmptyReply, error)
	VerifyEmail(ctx context.Context, in *EmailSettingsCodeRequest, opts ...grpc.CallOption) (*EmailSettingsEmptyReply, error)
}

type emailSettingsxClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSettingsxClient(cc grpc.ClientConnInterface) EmailSettingsxClient {
	return &emailSettingsxClient{cc}
}

func (c *emailSettingsxClient) GetSettingsByIds(ctx context.Context, in *EmailSettingsIdsRequest, opts ...grpc.CallOption) (*EmailSettingsListReply, error) {
	out := new(EmailSettingsListReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/get_settings_by_ids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) GetSettingsById(ctx context.Context, in *EmailSettingsIdRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error) {
	out := new(EmailSettingsObjectReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/get_settings_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) GetSettingsByEmail(ctx context.Context, in *EmailSettingsEmailRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error) {
	out := new(EmailSettingsObjectReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/get_settings_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) SetSettings(ctx context.Context, in *EmailSettingsObjectRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error) {
	out := new(EmailSettingsObjectReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/set_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) SetVerifiedSettings(ctx context.Context, in *EmailSettingsObjectRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error) {
	out := new(EmailSettingsObjectReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/set_verified_settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) SetRecipient(ctx context.Context, in *EmailSettingsRecipientRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error) {
	out := new(EmailSettingsObjectReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/set_recipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) SetSubscriptions(ctx context.Context, in *EmailSettingsSubscriptionsRequest, opts ...grpc.CallOption) (*EmailSettingsObjectReply, error) {
	out := new(EmailSettingsObjectReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/set_subscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) DeleteSettingsById(ctx context.Context, in *EmailSettingsIdRequest, opts ...grpc.CallOption) (*EmailSettingsEmptyReply, error) {
	out := new(EmailSettingsEmptyReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/delete_settings_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) ResendVerification(ctx context.Context, in *EmailSettingsIdRequest, opts ...grpc.CallOption) (*EmailSettingsEmptyReply, error) {
	out := new(EmailSettingsEmptyReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/resend_verification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSettingsxClient) VerifyEmail(ctx context.Context, in *EmailSettingsCodeRequest, opts ...grpc.CallOption) (*EmailSettingsEmptyReply, error) {
	out := new(EmailSettingsEmptyReply)
	err := c.cc.Invoke(ctx, "/emailsettings_v1.EmailSettingsx/verify_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSettingsxServer is the server API for EmailSettingsx service.
// All implementations must embed UnimplementedEmailSettingsxServer
// for forward compatibility
type EmailSettingsxServer interface {
	GetSettingsByIds(context.Context, *EmailSettingsIdsRequest) (*EmailSettingsListReply, error)
	GetSettingsById(context.Context, *EmailSettingsIdRequest) (*EmailSettingsObjectReply, error)
	GetSettingsByEmail(context.Context, *EmailSettingsEmailRequest) (*EmailSettingsObjectReply, error)
	SetSettings(context.Context, *EmailSettingsObjectRequest) (*EmailSettingsObjectReply, error)
	SetVerifiedSettings(context.Context, *EmailSettingsObjectRequest) (*EmailSettingsObjectReply, error)
	SetRecipient(context.Context, *EmailSettingsRecipientRequest) (*EmailSettingsObjectReply, error)
	SetSubscriptions(context.Context, *EmailSettingsSubscriptionsRequest) (*EmailSettingsObjectReply, error)
	DeleteSettingsById(context.Context, *EmailSettingsIdRequest) (*EmailSettingsEmptyReply, error)
	ResendVerification(context.Context, *EmailSettingsIdRequest) (*EmailSettingsEmptyReply, error)
	VerifyEmail(context.Context, *EmailSettingsCodeRequest) (*EmailSettingsEmptyReply, error)
	mustEmbedUnimplementedEmailSettingsxServer()
}

// UnimplementedEmailSettingsxServer must be embedded to have forward compatible implementations.
type UnimplementedEmailSettingsxServer struct {
}

func (UnimplementedEmailSettingsxServer) GetSettingsByIds(context.Context, *EmailSettingsIdsRequest) (*EmailSettingsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsByIds not implemented")
}
func (UnimplementedEmailSettingsxServer) GetSettingsById(context.Context, *EmailSettingsIdRequest) (*EmailSettingsObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsById not implemented")
}
func (UnimplementedEmailSettingsxServer) GetSettingsByEmail(context.Context, *EmailSettingsEmailRequest) (*EmailSettingsObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsByEmail not implemented")
}
func (UnimplementedEmailSettingsxServer) SetSettings(context.Context, *EmailSettingsObjectRequest) (*EmailSettingsObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettings not implemented")
}
func (UnimplementedEmailSettingsxServer) SetVerifiedSettings(context.Context, *EmailSettingsObjectRequest) (*EmailSettingsObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVerifiedSettings not implemented")
}
func (UnimplementedEmailSettingsxServer) SetRecipient(context.Context, *EmailSettingsRecipientRequest) (*EmailSettingsObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecipient not implemented")
}
func (UnimplementedEmailSettingsxServer) SetSubscriptions(context.Context, *EmailSettingsSubscriptionsRequest) (*EmailSettingsObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubscriptions not implemented")
}
func (UnimplementedEmailSettingsxServer) DeleteSettingsById(context.Context, *EmailSettingsIdRequest) (*EmailSettingsEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSettingsById not implemented")
}
func (UnimplementedEmailSettingsxServer) ResendVerification(context.Context, *EmailSettingsIdRequest) (*EmailSettingsEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerification not implemented")
}
func (UnimplementedEmailSettingsxServer) VerifyEmail(context.Context, *EmailSettingsCodeRequest) (*EmailSettingsEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedEmailSettingsxServer) mustEmbedUnimplementedEmailSettingsxServer() {}

// UnsafeEmailSettingsxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSettingsxServer will
// result in compilation errors.
type UnsafeEmailSettingsxServer interface {
	mustEmbedUnimplementedEmailSettingsxServer()
}

func RegisterEmailSettingsxServer(s grpc.ServiceRegistrar, srv EmailSettingsxServer) {
	s.RegisterService(&EmailSettingsx_ServiceDesc, srv)
}

func _EmailSettingsx_GetSettingsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).GetSettingsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/get_settings_by_ids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).GetSettingsByIds(ctx, req.(*EmailSettingsIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_GetSettingsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).GetSettingsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/get_settings_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).GetSettingsById(ctx, req.(*EmailSettingsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_GetSettingsByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).GetSettingsByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/get_settings_by_email",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).GetSettingsByEmail(ctx, req.(*EmailSettingsEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/set_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).SetSettings(ctx, req.(*EmailSettingsObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_SetVerifiedSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).SetVerifiedSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/set_verified_settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).SetVerifiedSettings(ctx, req.(*EmailSettingsObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_SetRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).SetRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/set_recipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).SetRecipient(ctx, req.(*EmailSettingsRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_SetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).SetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/set_subscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).SetSubscriptions(ctx, req.(*EmailSettingsSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_DeleteSettingsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).DeleteSettingsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/delete_settings_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).DeleteSettingsById(ctx, req.(*EmailSettingsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_ResendVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).ResendVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/resend_verification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).ResendVerification(ctx, req.(*EmailSettingsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSettingsx_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSettingsxServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emailsettings_v1.EmailSettingsx/verify_email",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSettingsxServer).VerifyEmail(ctx, req.(*EmailSettingsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSettingsx_ServiceDesc is the grpc.ServiceDesc for EmailSettingsx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSettingsx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emailsettings_v1.EmailSettingsx",
	HandlerType: (*EmailSettingsxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_settings_by_ids",
			Handler:    _EmailSettingsx_GetSettingsByIds_Handler,
		},
		{
			MethodName: "get_settings_by_id",
			Handler:    _EmailSettingsx_GetSettingsById_Handler,
		},
		{
			MethodName: "get_settings_by_email",
			Handler:    _EmailSettingsx_GetSettingsByEmail_Handler,
		},
		{
			MethodName: "set_settings",
			Handler:    _EmailSettingsx_SetSettings_Handler,
		},
		{
			MethodName: "set_verified_settings",
			Handler:    _EmailSettingsx_SetVerifiedSettings_Handler,
		},
		{
			MethodName: "set_recipient",
			Handler:    _EmailSettingsx_SetRecipient_Handler,
		},
		{
			MethodName: "set_subscriptions",
			Handler:    _EmailSettingsx_SetSubscriptions_Handler,
		},
		{
			MethodName: "delete_settings_by_id",
			Handler:    _EmailSettingsx_DeleteSettingsById_Handler,
		},
		{
			MethodName: "resend_verification",
			Handler:    _EmailSettingsx_ResendVerification_Handler,
		},
		{
			MethodName: "verify_email",
			Handler:    _EmailSettingsx_VerifyEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/emailsettings_v1.proto",
}
